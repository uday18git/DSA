isupper() 
islower()
sizeof()
integer 4 bytes
long 8 bytes
Float 4 bytes
Double 8 bytes
Character 1 byte

difference between class and a struct is that in class you can give public and private access to the members of the class
in struct by default everything is public and in class by default everything is private 


// before accessing anything in if conditions make sure it is not empty
switch(expression)
{
    case x:
        // code
        break;
    case y:
        // code
        break;
    default:
        break;
}


// reverse a number
class Solution {
public:
    int reverse(int x) {
        int rev=0;
        
        while(x!=0)
        {
            int temp=x%10;
            if(rev > INT_MAX / 10 )return 0;
            if(rev < INT_MIN / 10 )return 0;
            rev*=10;
            rev+=temp;
            x/=10;
        }
        return rev;
    }
};
// check if a number is palindrome 
// use above logic to reverse and check


// to check if a string is palindrome best way

bool isPalindrome(const string& str) {
    int left = 0;
    int right = str.length() - 1;

    while (left < right) {
        // Convert characters to lowercase to make the comparison case-insensitive
        if (tolower(str[left]) != tolower(str[right])) {
            return false; // Characters do not match, not a palindrome
        }

        left++;
        right--;
    }

    return true; // All characters matched, it's a palindrome
}

long long int A = INT_MAX+1;

runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'int'
(solution.cpp)
SUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:32:34

When you add 1 to INT_MAX, the expression INT_MAX+1 is first evaluated as an int operation.
However, since INT_MAX is already the maximum value that can be stored in an int,
adding 1 to it causes an integer overflow, which is undefined behavior in C++.

to fix -> long long int A = INT_MAX+1LL; // 1LL is a long long int literal 
// that forces the expression to be evaluated as a long long int operation.








class Solution {
public:
    bool check(TreeNode* root,long long int mina,long long int  maxa)
    {
        if(!root)return true;
        if(root->val<=mina || root->val>=maxa)return false;
        bool left =  check(root->left,mina,root->val);
        bool right = check(root->right,root->val,maxa);
        return left && right;
    }
    bool isValidBST(TreeNode* root) {
        
        return check(root,LLONG_MIN,LLONG_MAX); // LLONG_MIN and LLONG_MAX are the minimum and maximum values that can be stored in a long long int
    }
};